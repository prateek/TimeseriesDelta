# tab-delimited
timeseries.file.delimiter = \\t 

# timestamp column idx
timeseries.time.column = 0

# two aliases this time
timeseries.compute.aliases = high_user_activity,user_response_outlier

# compute the metric over the ip-address column
timeseries.high_user_activity.category_column = 1 
# we're interested in the number of mentions 
timeseries.high_user_activity.metric_type = COUNT
# indicate that we're looking for the average number 
# of occurrences over the window
timeseries.high_user_activity.compute_type = AVG
# indicate the average should be a time-based rate
# i.e. we want avg_num_mentions_per_window_size to exceed it's daily average
timeseries.high_user_activity.time_based = AVG
# 1hr window
timeseries.high_user_activity.window_size = 3600
# move forward by 5m increments
timeseries.high_user_activity.slide_size = 300
# threshold ratio to exceed
timeseries.high_user_activity.alert_ratio = 10

# compute the metric over the ip-address column
timeseries.user_response_outlier.category_column = 1 

# we're interested in the response size, i.e. column idx 2
timeseries.user_response_outlier.metric_type = 2 

# indicate that we're looking for the change in the metric
# as the window slides forward
timeseries.user_response_outlier.compute_type = AVG_DELTA

# note the abscence of the time based flag, this is because
# we want the computation to be based on the change in response size
# over the window, not the change in response size per unit time within 
# the window

# 30m window
timeseries.user_response_outlier.window_size = 1800

# move forward by 2m increments
timeseries.user_response_outlier.slide_size = 120

# threshold ratio to exceed
timeseries.user_response_outlier.alert_ratio = 3

